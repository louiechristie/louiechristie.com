{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["dayjs","extend","isoWeeksInYear","isLeapYear","weekOfYear","App","createPersistedState","useBirthDateState","Date","birthDate","handleDateChange","birth","death","add","today","renderBox","className","renderBoxFilled","MuiPickersUtilsProvider","utils","DayJSUtils","DatePicker","disableFuture","openTo","format","views","value","onChange","yearsJSX","year","weeksJSX","week","push","renderCalendar","class","disabled","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4WAYAA,IAAMC,OAAOC,KACbF,IAAMC,OAAOE,KACbH,IAAMC,OAAOG,KAuFEC,MArFf,WACE,IADa,EACaC,YAAqB,YACTC,CAAkB,IAAIC,KAAK,6BAFpD,mBAENC,EAFM,KAEKC,EAFL,KAIPC,EAAQX,IAAMS,GAEdG,EAAQD,EAAME,IADU,GACiB,QACzCC,EAAQd,MAGRe,EAAY,kBAAM,0BAAMC,UAAU,SAClCC,EAAkB,kBAAM,0BAAMD,UAAU,gBAsB9C,OACE,yBAAKA,UAAU,OACb,6BACE,4BAAQA,UAAU,uBAChB,yBAAKA,UAAU,SAAf,WACA,kBAACE,EAAA,EAAD,CAAyBC,MAAOC,KAC9B,kBAACC,EAAA,EAAD,CACEL,UAAU,aACVM,eAAa,EACbC,OAAO,OACPC,OAxCS,aAyCTC,MAAO,CAAC,OAAQ,QAAS,QACzBC,MAAOjB,EACPkB,SAAUjB,MAIhB,yBAAKM,UAAU,YArCE,WAGrB,IAFA,IAAIY,EAAW,GAEPC,EAAKlB,EAAMkB,OAAQA,GAAMjB,EAAMiB,OAAQA,IAAQ,CAErD,IADA,IAAIC,EAAW,GACPC,EAAO,EAAGA,GAAQ/B,IAAM,IAAIQ,KAAKqB,EAAM,EAAG,IAAI3B,iBAAkB6B,IAClEF,IAASlB,EAAMkB,QAAUE,EAAOpB,EAAMoB,QAAYF,IAASjB,EAAMiB,QAAUE,GAAQnB,EAAMmB,OAC3FD,EAASE,KAXS,0BAAMhB,UAAU,eAYxBa,EAAOf,EAAMe,QAAYA,IAASf,EAAMe,QAAUE,EAAOjB,EAAMiB,OACzED,EAASE,KAAKf,KAEda,EAASE,KAAKjB,KAGlBa,EAASI,KAAK,yBAAKhB,UAAU,SAASc,IAGxC,OAAOF,EAqBCK,IAGJ,gCACE,yBAAKC,MAAM,WACT,yBAAKlB,UAAU,OACb,yBAAKA,UAAU,WAAWC,IAA1B,mBACA,yBAAKD,UAAU,WAAWD,IAA1B,mBACA,yBAAKC,UAAU,WAAf,4BAGF,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,SAAf,WACA,kBAACE,EAAA,EAAD,CAAyBC,MAAOC,KAC9B,kBAACC,EAAA,EAAD,CACEL,UAAU,aACVmB,UAAQ,EACRX,OAjEK,aAkELE,MAAOd,EACPe,SAAU,kBAMlB,yBAAKX,UAAU,WACb,wCAAa,uBAAGoB,KAAK,iCAAR,wBCjFLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.be56e981.chunk.js","sourcesContent":["import React from 'react';\nimport createPersistedState from 'use-persisted-state';\nimport dayjs from 'dayjs';\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\nimport DayJSUtils from '@date-io/dayjs';\n\nimport './App.css';\n\nimport isoWeeksInYear from 'dayjs/plugin/isoWeeksInYear'\nimport isLeapYear from 'dayjs/plugin/isLeapYear' // rely on isLeapYear plugin\nimport weekOfYear from 'dayjs/plugin/weekOfYear'\n\ndayjs.extend(isoWeeksInYear)\ndayjs.extend(isLeapYear)\ndayjs.extend(weekOfYear)\n\nfunction App() {\n  const useBirthDateState = createPersistedState('birthDate');\n  const [birthDate, handleDateChange] = useBirthDateState(new Date('1980-01-01T00:00:00.000Z'));\n  const formatString = 'D MMM YYYY';\n  const birth = dayjs(birthDate)\n  const lifeExpectancyInYears = 90;\n  const death = birth.add(lifeExpectancyInYears, 'year')\n  const today = dayjs();\n\n  const renderNoBox = () => <span className=\"box noBox\"></span>;\n  const renderBox = () => <span className=\"box\"></span>;\n  const renderBoxFilled = () => <span className=\"box filled\"></span>;\n\n  const renderCalendar = () => {\n    let yearsJSX = [];\n  \n    for(let year=birth.year(); year<=death.year(); year++) {\n      let weeksJSX = [];\n      for(let week = 1; week <= dayjs(new Date(year, 1, 1)).isoWeeksInYear(); week++) {\n        if((year === birth.year() && week < birth.week()) || (year === death.year() && week >= death.week())) {\n          weeksJSX.push(renderNoBox());\n        } else if ((year < today.year()) || (year === today.year() && week < today.week()) ) {\n          weeksJSX.push(renderBoxFilled());\n        } else {\n          weeksJSX.push(renderBox());\n        }\n      }\n      yearsJSX.push(<div className=\"boxes\">{weeksJSX}</div>);\n    }\n  \n    return yearsJSX;\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <header className=\"datePickerContainer\">\n          <div className=\"title\">Birth: </div>\n          <MuiPickersUtilsProvider utils={DayJSUtils}>\n            <DatePicker\n              className=\"datePicker\" \n              disableFuture\n              openTo=\"year\"\n              format={formatString}\n              views={[\"year\", \"month\", \"date\"]}\n              value={birthDate}\n              onChange={handleDateChange}\n            />\n          </MuiPickersUtilsProvider>\n        </header>\n        <div className=\"calendar\">\n          { renderCalendar()}\n        </div>\n\n        <footer>\n          <div class=\"footer1\">\n            <div className=\"key\">\n              <div className=\"keyItem\">{renderBoxFilled()} = week gone by</div>\n              <div className=\"keyItem\">{renderBox()} = week to come</div>\n              <div className=\"keyItem\">(assuming 90 year life)</div>\n            </div>\n\n            <div className=\"datePickerContainer\">\n              <div className=\"title\">Death: </div>\n              <MuiPickersUtilsProvider utils={DayJSUtils} >\n                <DatePicker\n                  className=\"datePicker\"          \n                  disabled\n                  format={formatString}\n                  value={death}\n                  onChange={()=>{}}\n              />\n              </MuiPickersUtilsProvider>\n            </div>\n          </div>\n\n          <div className=\"footer2\">\n            <div>Made by <a href=\"https://www.louiechristie.com\">Louie Christie</a></div>\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}